bootJar {
    enabled = false
}

jar {
    enabled = true
}

dependencies {
    api('org.springframework.boot:spring-boot-starter-data-jpa')
    api('com.querydsl:querydsl-jpa')
    implementation('org.springframework.boot:spring-boot-starter-data-mongodb')
    annotationProcessor ("com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jpa")
    annotationProcessor('jakarta.persistence:jakarta.persistence-api')
    annotationProcessor('jakarta.annotation:jakarta.annotation-api')
    implementation('com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.8.1')
    implementation('p6spy:p6spy:3.9.1')
    runtimeOnly('com.h2database:h2')
    runtimeOnly('mysql:mysql-connector-java')

    testImplementation('org.testcontainers:junit-jupiter:1.17.4')
    testImplementation('org.testcontainers:mysql:1.17.4')
}

test {
    systemProperty 'spring.profiles.active', System.getProperty('spring.profiles.active')

    testLogging {
        showStandardStreams = true // Print standard out and standard error to the console.
    }
    afterSuite { desc, result ->
        if (!desc.parent) { // will match the outermost suite
            def output = "Test Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} passed, ${result.failedTestCount} failed, ${result.skippedTestCount} skipped)"
            def startItem = '|  ', endItem = '  |'
            def repeatLength = startItem.length() + output.length() + endItem.length()
            println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
        }
    }
}
